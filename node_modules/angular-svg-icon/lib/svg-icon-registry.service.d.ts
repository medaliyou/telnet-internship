import { InjectionToken, Optional } from '@angular/core';
import { Observable } from 'rxjs';
import { SvgLoader } from './svg-loader';
import * as ɵngcc0 from '@angular/core';
export declare const SERVER_URL: InjectionToken<string>;
export declare class SvgIconRegistryService {
    private loader;
    private platformId;
    protected serverUrl: string;
    private _document;
    private document;
    private iconsByUrl;
    private iconsLoadingByUrl;
    constructor(loader: SvgLoader, platformId: Object, serverUrl: string, _document: any);
    /** Add a SVG to the registry by passing a name and the SVG. */
    addSvg(name: string, data: string): void;
    /** Load a SVG to the registry from a URL. */
    loadSvg(url: string, name?: string): Observable<SVGElement>;
    /** Get loaded SVG from registry by name. (also works by url because of blended map) */
    getSvgByName(name: string): Observable<SVGElement>;
    /** Remove a SVG from the registry by URL (or name). */
    unloadSvg(url: string): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SvgIconRegistryService, [null, null, { optional: true; }, { optional: true; }]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<SvgIconRegistryService>;
}
export declare function SVG_ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry: SvgIconRegistryService, loader: SvgLoader, platformId: object, serverUrl?: string, document?: any): SvgIconRegistryService;
export declare const SVG_ICON_REGISTRY_PROVIDER: {
    provide: typeof SvgIconRegistryService;
    deps: (typeof SvgLoader | Optional[])[];
    useFactory: typeof SVG_ICON_REGISTRY_PROVIDER_FACTORY;
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ZnLWljb24tcmVnaXN0cnkuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJzdmctaWNvbi1yZWdpc3RyeS5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFN2Z0xvYWRlciB9IGZyb20gJy4vc3ZnLWxvYWRlcic7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBTRVJWRVJfVVJMOiBJbmplY3Rpb25Ub2tlbjxzdHJpbmc+O1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU3ZnSWNvblJlZ2lzdHJ5U2VydmljZSB7XG4gICAgcHJpdmF0ZSBsb2FkZXI7XG4gICAgcHJpdmF0ZSBwbGF0Zm9ybUlkO1xuICAgIHByb3RlY3RlZCBzZXJ2ZXJVcmw6IHN0cmluZztcbiAgICBwcml2YXRlIF9kb2N1bWVudDtcbiAgICBwcml2YXRlIGRvY3VtZW50O1xuICAgIHByaXZhdGUgaWNvbnNCeVVybDtcbiAgICBwcml2YXRlIGljb25zTG9hZGluZ0J5VXJsO1xuICAgIGNvbnN0cnVjdG9yKGxvYWRlcjogU3ZnTG9hZGVyLCBwbGF0Zm9ybUlkOiBPYmplY3QsIHNlcnZlclVybDogc3RyaW5nLCBfZG9jdW1lbnQ6IGFueSk7XG4gICAgLyoqIEFkZCBhIFNWRyB0byB0aGUgcmVnaXN0cnkgYnkgcGFzc2luZyBhIG5hbWUgYW5kIHRoZSBTVkcuICovXG4gICAgYWRkU3ZnKG5hbWU6IHN0cmluZywgZGF0YTogc3RyaW5nKTogdm9pZDtcbiAgICAvKiogTG9hZCBhIFNWRyB0byB0aGUgcmVnaXN0cnkgZnJvbSBhIFVSTC4gKi9cbiAgICBsb2FkU3ZnKHVybDogc3RyaW5nLCBuYW1lPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxTVkdFbGVtZW50PjtcbiAgICAvKiogR2V0IGxvYWRlZCBTVkcgZnJvbSByZWdpc3RyeSBieSBuYW1lLiAoYWxzbyB3b3JrcyBieSB1cmwgYmVjYXVzZSBvZiBibGVuZGVkIG1hcCkgKi9cbiAgICBnZXRTdmdCeU5hbWUobmFtZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxTVkdFbGVtZW50PjtcbiAgICAvKiogUmVtb3ZlIGEgU1ZHIGZyb20gdGhlIHJlZ2lzdHJ5IGJ5IFVSTCAob3IgbmFtZSkuICovXG4gICAgdW5sb2FkU3ZnKHVybDogc3RyaW5nKTogdm9pZDtcbn1cbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIFNWR19JQ09OX1JFR0lTVFJZX1BST1ZJREVSX0ZBQ1RPUlkocGFyZW50UmVnaXN0cnk6IFN2Z0ljb25SZWdpc3RyeVNlcnZpY2UsIGxvYWRlcjogU3ZnTG9hZGVyLCBwbGF0Zm9ybUlkOiBvYmplY3QsIHNlcnZlclVybD86IHN0cmluZywgZG9jdW1lbnQ/OiBhbnkpOiBTdmdJY29uUmVnaXN0cnlTZXJ2aWNlO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgU1ZHX0lDT05fUkVHSVNUUllfUFJPVklERVI6IHtcbiAgICBwcm92aWRlOiB0eXBlb2YgU3ZnSWNvblJlZ2lzdHJ5U2VydmljZTtcbiAgICBkZXBzOiAodHlwZW9mIFN2Z0xvYWRlciB8IE9wdGlvbmFsW10pW107XG4gICAgdXNlRmFjdG9yeTogdHlwZW9mIFNWR19JQ09OX1JFR0lTVFJZX1BST1ZJREVSX0ZBQ1RPUlk7XG59O1xuIl19